BodyMass <- c(10400, 6100, 36, 60)
BodyMass
## 1 2 3 4 5 6
typeof(BodyMass)
BodyMass <- c(10400L, 6100L, 36L, 60.3L)
BodyMass <- c(10400L, 6100L, 36L, 60L)
BodyMass
SpeciesNames <- c("Loxodonta africana", "Loxodonta africana africana","Lycaon pictus","Thunnus alalunga")
# Print the SpeciesNames object
SpeciesNames
# Call the object class for SpeciesNames
typeof(SpeciesNames)
# Call the object class for a writen string
typeof("Loxodonta africana")
typeof("Loxodonta africana")
3 > 4
typeof("F")
ls
ls()
attributes(SpeciesNames)
attributes(BodyMass)
SpeciesNames
BodyMass
attributes(BodyMass)
names(BodyMass) <- c("Loxodonta africana", "Loxodonta africana africana" , "Lycaon pictus", "Thunnus alalunga")
names(BodyMass)
attributes(BodyMass)
BodyMass + 1
BodyMass
dim(BodyMass) <- c(2, 2)
BodyMass
dim(BodyMass) <- c(4, 2)
dim(BodyMass) <- c(4, 2)
dim(BodyMass) <- c(1,0)
BodyMass ,- as.vector(BodyMass)
BodyMass <- as.vector(BodyMass)
BodyMass
dim(BodyMass) <- c(4, 2)
dim(BodyMass) <- c(1, 2, 3)
BodyMass <- c(10400, 6100, 36, 60.3)
BodyMass <- c(10400, 6100, 36, 60.3,185,65,5.2,80,6000,1600,95)
BodyMass
BodyMass <- c(10400, 6100, 36, 60.3, 185, 65, 5.2, 80, 6000, 1600, 95)
SpeciesNames <- c("Loxodonta africana", "Loxodonta africana africana","Lycaon pictus","Thunnus alalunga",
"Inia geoffrensis", "Panthera pardus orientalis", "Vulpes lagopus", "Canis lupus arctos",
"Elephas maximus indicus", "Delphinapterus leucas", "Thunnus obesus")
dim(BodyMass) <- c(2, 2)
BodyMass <- c(10400, 6100, 36, 60.3, 185, 65, 5.2, 80, 6000, 1600)
BodyMass
BodyMass <- c(10400L, 6100L, 36L, 60L, 185L, 65L, 5L, 80L, 6000L, 1600L)
SpeciesNames <- c("Loxodonta africana", "Loxodonta africana africana","Lycaon pictus","Thunnus alalunga",
"Inia geoffrensis", "Panthera pardus orientalis", "Vulpes lagopus", "Canis lupus arctos",
"Elephas maximus indicus", "Delphinapterus leucas")
dim(BodyMass) <- c(2, 5)
BodyMass
dim(BodyMass) <- c(1, 2, 5)
BodyMassMatrix <- matrix(BodyMass, nrow = 2)
BodyMassMatrix
BodyMassMatrix <- matrix(BodyMass, nrow = 2, byrow = TRUE)
# Print the object BodyMassMatrix
BodyMassMatrix
ar <- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
ar
dim(BodyMass) <- c(2, 5)
typeof(BodyMass)
class(BodyMass)
BodyMass <- c(10400, 6100, 36, 60.3, 185, 65, 5.2, 80, 6000, 1600, 95)
dim(BodyMass) <- c(2, 5)
typeof(BodyMass)
class(BodyMass)
attributes(BodyMass)
dim(BodyMassMatrix) <- c(2, 5)
typeof(BodyMass)
class(BodyMass)
attributes(BodyMass)
dim(BodyMass) <- c(2, 5)
dim(BodyMass) <- c(2, 5)
BodyMass <- c(10400, 6100, 36, 60.3, 185, 65, 5.2, 80, 6000, 1600, 95)
dim(BodyMass) <- c(2, 5)
BodyMass <- c(10400, 6100, 36, 60.3, 185, 65, 5.2, 80, 6000, 1600)
dim(BodyMass) <- c(2, 5)
typeof(BodyMass)
class(BodyMass)
attributes(BodyMass)
class("Hello")
now <- Sys.time()
now
typeof(now)
class(now)
mil <- 1000000
mil
mil <- 1000000
# Print the number
mil
# Look for the class of the mil object
class(mil)
# Change the object class to POSIXct
class(mil) <- c("POSIXct", "POSIXt")
# Print the mil object after changing the object class
mil
SppComunName <- factor(c("African Elephant", "African savanna elephant", "African Wild Dog",
"Albacore Tuna", "Amazon River Dolphin", "Amur Leopard", "Arctic Fox",
"Arctic Wolf", "Asian Elephant", "Beluga"))
typeof(SppComunName)
SppComunName <- c("African Elephant", "African savanna elephant", "African Wild Dog",
"Albacore Tuna", "Amazon River Dolphin", "Amur Leopard", "Arctic Fox",
"Arctic Wolf", "Asian Elephant", "Beluga")
# Type of information in the object SppComunName
typeof(SppComunName)
attributes(SppComunName)
SppComunName <- factor(c("African Elephant", "African savanna elephant", "African Wild Dog",
"Albacore Tuna", "Amazon River Dolphin", "Amur Leopard", "Arctic Fox",
"Arctic Wolf", "Asian Elephant", "Beluga"))
# Type of information in the object SppComunName after making it a factor
typeof(SppComunName)
attributes(SppComunName)
unclass(SppComunName)
SppComunName
as.character(SppComunName)
SpeciesNames
BodyMass
CommonName
SppComunName
as.character(SppComunName)
Max Body Mass
BodyMass
as.numeric(BodyMass)
ScientificName
SpeciesNames
list(face = "ace", suit = "hearts", value = 1)
typeof(df)
df
EndSppDF <- data.frame(CommonName = c("African Elephant", "African savanna elephant",
"African Wild Dog", "Albacore Tuna",
"Amazon River Dolphin", "Amur Leopard",
"Arctic Fox", "Arctic Wolf", "Asian Elephant",
"Beluga"),
ScientificName = c("Loxodonta africana", "Loxodonta africana africana",
"Lycaon pictus", "Thunnus alalunga", "Inia geoffrensis",
"Panthera pardus orientalis", "Vulpes lagopus",
"Canis lupus arctos", "Elephas maximus indicus",
"Delphinapterus leucas"),
BodyMass = c(10400.0, 6100.0, 36.0, 60.3, 185.0, 65.0, 5.2,
80.0, 6000.0, 1600.0))
# Print the Data Frame
EndSppDF
typeof(EndSppDF)
class(EndSppDF)
str(EndSppDF)
EndSppDF <- data.frame(CommonName = c("African Elephant", "African savanna elephant",
"African Wild Dog", "Albacore Tuna",
"Amazon River Dolphin", "Amur Leopard",
"Arctic Fox", "Arctic Wolf", "Asian Elephant",
"Beluga"),
ScientificName = c("Loxodonta africana", "Loxodonta africana africana",
"Lycaon pictus", "Thunnus alalunga", "Inia geoffrensis",
"Panthera pardus orientalis", "Vulpes lagopus",
"Canis lupus arctos", "Elephas maximus indicus",
"Delphinapterus leucas"),
BodyMass = c(10400.0, 6100.0, 36.0, 60.3, 185.0, 65.0, 5.2,
80.0, 6000.0, 1600.0),
stringsAsFactors = T)
# Print the Data Frame
EndSppDF
str(EndSppDF)
read.csv("EndSppData.csv")
read.csv2("EndSppData.csv")
tail(EndSppDF)
EndSppDF <- read.csv2("EndSppData.csv")
tail(EndSppDF)
dim(EndSppDFCopy.csv)
dim(EndSppDF)
#| echo: false
EndSppDF <- read.csv2("EndSppData.csv")
knitr::kable(head(EndSppDF))
# Top rows
head(EndSppDF)
# bottom rows
tail(EndSppDF)
knitr::include_graphics("hopr_0305.png")
knitr::include_graphics("hopr_0305.png")
knitr::kable(head(EndSppDF))
EndSppDF[1, c(1, 2, 3)]
#| label: fig_view.
#| echo: false
#| out-width: null
#| fig-cap: |
#|   R uses the _ij_ notation system of linear algebra. The commands in this
#|   figure will return the shaded value.
knitr::include_graphics("hopr_0401.png")
EndSppDF[1:2, 1:2]
EndSppDF[1:2, 1]
EndSppDF[1:2, 1, drop = FALSE]
EndSppDF[-(2:52), 1:3]
EndSppDF[c(-1, 1), 1]
EndSppDF[0, 0]
EndSppDF[1, ]
rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F)
EndSppDF[rows, ]
rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F)
rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F)
EndSppDF[rows, ]
#| label: fig_logicals.
#| echo: false
#| out-width: null
#| fig-cap: |
#|   You can use vectors of TRUEs and FALSEs to tell R exactly which values you
#|   want to extract and which you do not. The command would return just the
#|   numbers 1, 6, and 5.
knitr::include_graphics("hopr_0402.png")
EndSppDF
names(You can use vectors of TRUEs and FALSEs to tell R exactly which values you want to extract and which you do not. The command would return just the numbers 1, 6, and 5)
names(You can use vectors of TRUEs and FALSEs to tell R exactly which values you want to extract and which you do not. The command would return just the numbers 1, 6, and 5)
names(EndSppDF)
EndSppDF[ , "BodyMass"]
EndSppDF[1, c("Common.name" ,"Conservation.status","BodyMass")]
selectSpp <- function(speciess) {
speciess[1, ]
}
selectSpp(EndSppDF)
selectSpp(EndSppDF)
selectSpp(EndSppDF)
selectSpp(EndSppDF)
selectSpp(EndSppDF)
EndSppDF2 <- EndSppDF[1:82, ]
head(EndSppDF2)
EndSppDF3 <- EndSppDF[c(2, 1, 3:82), ]
random <- sample(1:82, size = 82)
random
EndSppDF4 <- EndSppDF[random, ]
head(EndSppDF4)
EndSppDF$value
mean(EndSppDF$BodyMass)
median(EndSppDF$BodyMass)
lst <- list(numbers = c(1, 2), logical = TRUE, strings = c("a", "b", "c"))
lst
lst[1]
sum(lst[1])
lst$numbers
lst["numbers"]
#| label: fig_trains
#| echo: false
#| out-width: null
#| fig-cap: |
#|   It can be helpful to think of your list as a train. Use single brackets to select train cars, double brackets to select the contents inside of a car.
knitr::include_graphics("hopr_0403.png")
EndSppDF2 <- EndSppDF
EndSppDF2$new <- 1:82
head(EndSppDF2)
EndSppDF2$new <- NULL
head(EndSppDF2)
EndSppDF$BodyMass
head(EndSppDF2)
EndSppDF2$Conservation.status=="Vulnerable"
wich(EndSppDF2$Conservation.status=="Vulnerable")
which(EndSppDF2$Conservation.status=="Vulnerable")
EndSppDF2[c(13, 26, 39, 52), 4]
EndSppDF2[c(1, 3, 6, 13, 14, 23, 26, 35, 41, 44, 54, 60, 70, 74, 7), 4]
EndSppDF2$BodyMass[c(1, 3, 6, 13, 14, 23, 26, 35, 41, 44, 54, 60, 70, 74, 7)]
length(c(1, 3, 6, 13, 14, 23, 26, 35, 41, 44, 54, 60, 70, 74, 7))
lengtgh(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA))
length(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA))
EndSppDF2$BodyMass[c(1, 3, 6, 13, 14, 23, 26, 35, 41, 44, 54, 60, 70, 74, 7)] <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
EndSppDF2$BodyMass[c(1, 3, 6, 13, 14, 23, 26, 35, 41, 44, 54, 60, 70, 74, 7)] <- NA
head(EndSppDF2, 13)
EndSppDF2$Conservation.status == "Vulnerable"
sum(EndSppDF2$Conservation.status == "Vulnerable")
Vulnerablenames
names(EndSppDF2)
EndSppDF2 <- EndSppDF
EndSppDF2$Conservation.status == "Vulnerable"
sum(EndSppDF2$Conservation.status == "Vulnerable")
EndSppDF2$Conservation.status == "Vulnerable"
EndSppDF2$BodyMass[EndSppDF2$Conservation.status == "Vulnerable"]
EndSppDF2$BodyMass[EndSppDF2$Conservation.status == "Vulnerable"] <- NA
head(EndSppDF2)
#| label: fig_view.
#| echo: false
#| out-width: null
#| fig-cap: |
#|   R will evaluate the expressions on each side of a Boolean operator
#|   separately, and then combine the results into a single TRUE or FALSE.
#|   If you do not supply a complete test to each side of the operator, R will
#|   return an error..
knitr::include_graphics("hopr_0501.png")
EndSppDF2$Conservation.status == "Vulnerable" & EndSppDF2$BodyMass > 1000
EndSppDF2$Conservation.status == "Vulnerable"
EndSppDF2$BodyMass[EndSppDF2$Conservation.status == "Vulnerable"]
EndSppDF2 <- EndSppDF
EndSppDF2$BodyMass[EndSppDF2$Conservation.status == "Vulnerable"]
EndSppDF2$Conservation.status == "Vulnerable" & EndSppDF2$BodyMass > 1000
HeavyVulnerable <- EndSppDF2$Conservation.status == "Vulnerable" & EndSppDF2$BodyMass > 1000
EndSppDF2[HeavyVulnerable, ]
EndSppDF2$BodyMass[HeavyVulnerable]
EndSppDF2$BodyMass[HeavyVulnerable] <- NA
EndSppDF2[HeavyVulnerable]
EndSppDF2$BodyMass[HeavyVulnerable]
EndSppDF2[HeavyVulnerable]
EndSppDF2[HeavyVulnerable,]
1 + NA
NA == 1
mean(c(NA, 1:50))
NA == NA
c(1, 2, 3, NA) == NA
