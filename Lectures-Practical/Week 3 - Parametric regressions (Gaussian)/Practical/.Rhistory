knitr::opts_chunk$set(echo = TRUE)
DK.Biodiv <-  read.csv("Data/Biowide_AllSppRich.csv")
require(tidyverse)
DK.Biodiv <-  read_csv("Data/Biowide_AllSppRich.csv")
ls()
head(DK.Biodiv)
require(palmerpenguins)
penguins
ggplot(DK.Biodiv,aes(y=NatDensBasMp))+geom_boxplot()
var <- "NatDensBasMp"
ggplot(DK.Biodiv,aes(y=NatDensBasMp))+geom_boxplot() + ggtitle(var)
?aes_string
ggplot(DK.Biodiv,aes_string(y=var))+geom_boxplot() + ggtitle(var)
ggplot(DK.Biodiv,aes(y=var))+geom_boxplot() + ggtitle(var)
ggplot(DK.Biodiv,aes(y=.data[[var]]))+geom_boxplot() + ggtitle(var)
?grid.arrange
??grid.arrange
?  facet_grid
ggplot(DK.Biodiv,aes(y=NatDensBasMp))+geom_boxplot() + ggtitle("Nature Density")
ggplot(DK.Biodiv,aes(y=Dis2Cost))+geom_boxplot() + ggtitle("Distance to coast")
# Set a plotting space with 6 regions (two columns and three rows). For this, use the function
library(cowplot)
# Set a plotting space with 6 regions (two columns and three rows). For this, use the function
library(cowplot)
# Set a plotting space with 6 regions (two columns and three rows). For this, use the function
library(cowplot)
ggplot(DK.Biodiv,aes(y=.data[[var]]))+geom_boxplot() + ggtitle(var)
# Plot a box-plot for Nature Density
ggplot(DK.Biodiv,aes(y=NatDensBasMp))+geom_boxplot() + ggtitle("Nature Density")
# Plot a box-plot for Distance to coast
ggplot(DK.Biodiv,aes(y=Dis2Cost))+geom_boxplot() + ggtitle("Distance to coast")
# Plot a box-plot for Human Impact Index
ggplot(DK.Biodiv,aes(y=HII))+geom_boxplot() + ggtitle("Human Impact Index")
# Plot a box-plot for Slope
ggplot(DK.Biodiv,aes(y=Slope30mAgg))+geom_boxplot() + ggtitle("Slope")
# Plot a box-plot for Precipitation Seasonality
ggplot(DK.Biodiv,aes(y=PrecSea))+geom_boxplot() + ggtitle("Precipitation Seasonality")
plot_grid(plot_1, plot_2,plot_3,plot_4,labels = c('A', 'B', 'C', 'D'))
plot_1 <- ggplot(DK.Biodiv,aes(y=NatDensBasMp))+geom_boxplot() + ggtitle("Nature Density")
plot_2 <- ggplot(DK.Biodiv,aes(y=Dis2Cost))+geom_boxplot() + ggtitle("Distance to coast")
plot_3 <- ggplot(DK.Biodiv,aes(y=HII))+geom_boxplot() + ggtitle("Human Impact Index")
plot_4 <- ggplot(DK.Biodiv,aes(y=Slope30mAgg))+geom_boxplot() + ggtitle("Slope")
plot_4 <- ggplot(DK.Biodiv,aes(y=PrecSea))+geom_boxplot() + ggtitle("Precipitation Seasonality")
plot_grid(plot_1, plot_2,plot_3,plot_4,labels = c('A', 'B', 'C', 'D'))
names(DK.Biodiv)
names(DK.Biodiv)[7:11]
for( var in c(names(DK.Biodiv)[7:11])){
ggplot(DK.Biodiv,aes(y=.data[[var]]))+geom_boxplot() + ggtitle(var)
}
for( var in c(names(DK.Biodiv)[7:11])){
ggplot(DK.Biodiv,aes(y=.data[[var]]))+geom_boxplot() + ggtitle(var)
}
for( var in c(names(DK.Biodiv)[7:11])){
print(ggplot(DK.Biodiv,aes(y=.data[[var]]))+geom_boxplot() + ggtitle(var))
}
PredNames <- names(DK.Biodiv)[-c(1,4:6)]
i <- PredNames[1]
DK.Div.Tmp <- DK.Biodiv[,c("Log.S.AllGrp",i)]
Lm.Mod <- lm(Log.S.AllGrp ~ .,
data = DK.Div.Tmp)
# Save the residuals into an object named Lm.Resid
Lm.Resid <- residuals(Lm.Mod)
Lm.Fitt <- predict(Lm.Mod)
tibble(Lm.Resid,Lm.Fitt)
plrint(tibble(Lm.Resid,Lm.Fitt))
print(tibble(Lm.Resid,Lm.Fitt))
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid))
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
ggscatter()
?ggscatter
?scatter
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth() +
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals")
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth() +
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
+ geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth() +
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
+ geom_hline(yintercept=0)
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth() +
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
+ geom_hline(yintercept=0)
?geom_hline
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_point() +
geom_smooth() +
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
for (i in PredNames){ #i <- PredNames[1]
# Create a new subset data.frame named DK.Div.Tmp that only contains ONLY the log-richness and the evaluated predictors as variables
DK.Div.Tmp <- DK.Biodiv[,c("Log.S.AllGrp",i)]
# Build a regression model, using the lm() function, and store it as an object named Lm.Mod
Lm.Mod <- lm(Log.S.AllGrp ~ .,
data = DK.Div.Tmp)
# Save the residuals into an object named Lm.Resid
Lm.Resid <- residuals(Lm.Mod)
# Save the fitted/predicted values into an object named Lm.Fitt
Lm.Fitt <- predict(Lm.Mod)
# Plot the Residuals vs Predicted values
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
# add the points
geom_point() +
#plot the smutter
geom_smooth() +
# Define the text to be added as main title and the x/y-axis label
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
# Add a horizontal line using the abline() function at zero for reference
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
}
for (i in PredNames){ #i <- PredNames[1]
# Create a new subset data.frame named DK.Div.Tmp that only contains ONLY the log-richness and the evaluated predictors as variables
DK.Div.Tmp <- DK.Biodiv[,c("Log.S.AllGrp",i)]
# Build a regression model, using the lm() function, and store it as an object named Lm.Mod
Lm.Mod <- lm(Log.S.AllGrp ~ .,
data = DK.Div.Tmp)
# Save the residuals into an object named Lm.Resid
Lm.Resid <- residuals(Lm.Mod)
# Save the fitted/predicted values into an object named Lm.Fitt
Lm.Fitt <- predict(Lm.Mod)
# Plot the Residuals vs Predicted values
print(ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
# add the points
geom_point() +
#plot the smutter
geom_smooth() +
# Define the text to be added as main title and the x/y-axis label
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
# Add a horizontal line using the abline() function at zero for reference
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2))
}
# Build a regression model using the lm() function where all six variables predict the log-richness for all sampled species. # save the model as an object named FullMod
FullMod <- lm(Log.S.AllGrp ~ NatDensBasMp + Dis2Cost + HII + Slope30mAgg + PrecSea + decimalLongitude + decimalLatitude,
data = DK.Biodiv)
# Call the model
FullMod
# Now extract the residuals and save them into an object named Lm.Resid. For this, use the residuals() function
Lm.Resid <- residuals(FullMod)
# Now extract the fitted values and save them into an object named Lm.Fitt.  For this, use the predict() function
Lm.Fitt <- predict(FullMod)
# Plot the Residuals vs Predicted values
print(ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
# add the points
geom_point() +
#plot the smutter
geom_smooth() +
# Define the text to be added as main title and the x/y-axis label
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
# Add a horizontal line using the abline() function at zero for reference
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2))
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
geom_density()
?geom_density
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(y=Lm.Resid)) +
geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram() + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram(aes(y = density)) + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram(aes(y =.density)) + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid)) +
geom_histogram(aes(y = ..density..)) + geom_density()
?geom_histogram
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Resid,after_stat(density))) +
geom_histogram() + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid,after_stat(density))) +
geom_histogram()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid,after_stat(density))) +
geom_histogram() + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid, after_stat(density))) +
geom_histogram() + geom_density()
ggplot(diamonds, aes(price, after_stat(density), colour = cut)) +
geom_freqpoly(binwidth = 500)
tibble(Lm.Resid,Lm.Fitt)
print(tibble(Lm.Resid,Lm.Fitt))
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid)) +
geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid, after_stat(density))) +
geom_histogram() + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid, after_stat(density))) +
geom_histogram(bins =10) + geom_density()
ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(Lm.Resid, after_stat(density))) +
geom_histogram(bins =15) + geom_density()
qqnorm(Lm.Resid) # use the qqnorm() on the object containing the residuals to make a q-q plot
qqline(Lm.Resid) # use the qqline in the object containing the residuals to add the expectati
a<-qqnorm(Lm.Resid)
ggplot(Lm.Resid, aes(sample = y)) + stat_qq() + stat_qq_line()
ggplot(Lm.Resid, aes(sample = Lm.Resid)) + stat_qq() + stat_qq_line()
ggplot(tibble(Lm.Resid,Lm.Fitt), aes(sample = Lm.Resid)) + stat_qq() + stat_qq_line()
FullMod <- lm(Log.S.AllGrp ~ NatDensBasMp + Dis2Cost + HII + Slope30mAgg + PrecSea,
data = DK.Biodiv)
# Call the model
FullMod
# Now extract the residuals and save them into an object named Lm.Resid. For this, use the residuals() function
Lm.Resid <- residuals(FullMod)
# Now extract the fitted values and save them into an object named Lm.Fitt.  For this, use the predict() function
Lm.Fitt <- predict(FullMod)
# Plot the Residuals vs Predicted values
print(ggplot(tibble(Lm.Resid,Lm.Fitt),
aes(x=Lm.Fitt,y=Lm.Resid)) +
# add the points
geom_point() +
#plot the smutter
geom_smooth() +
# Define the text to be added as main title and the x/y-axis label
ggtitle(PredNames) + xlab("Fitted values") + ylab("Residuals") +
# Add a horizontal line using the abline() function at zero for reference
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2))
shapiro.test(Lm.Resid)
ls()
FullMod
vif(FullMod)
car::vif(FullMod)
1 - car::vif(FullMod)
car::vif(FullMod)
1/car::vif(FullMod)
car::vif(FullMod)
1/# estimate the variance inflation.
car::vif(FullMod)
1//1.392625
1/1.392625
PredNames
names(DK.Biodiv)[-c(1,4:6)]
dim(DK.Biodiv)
PredNames <- names(DK.Biodiv)[7:11]
PredNames <- names(DK.Biodiv)[7:11]
PredNames
ggplot(DK.Biodiv,
awes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point()
ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point()
ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point() +
geom_line()
?geom_smooth
ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point() +
geom_smooth(method = lm)
plot_1 <- ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point() +
geom_smooth(method = lm) +
ggtitle("Nature Density") + xlab("Nature Density") + ylab("Species richness")
plot_1
plot_1 <- ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Nature Density") + xlab("Nature Density") + ylab("Species richness")
plot_1
ggplot(DK.Biodiv,
aes(x = Dis2Cost,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Distance to coast") + xlab("Distance to coast") + ylab("Species richness")
ggplot(DK.Biodiv,
aes(x = log10(Dis2Cost),
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Distance to coast") + xlab("Distance to coast") + ylab("Species richness")
ggplot(DK.Biodiv,
aes(x = log10(Dis2Cost),
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Distance to coast") + xlab("Distance to coast") + ylab("Species richness")
plot_5 <- ggplot(DK.Biodiv,
aes(x = PrecSea,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Precipitation Seasonality") + xlab("Precipitation Seasonality") + ylab("Species richness")
plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, labels = c('A', 'B', 'C', 'D', 'E'))
plot_1 <- ggplot(DK.Biodiv,
aes(x = NatDensBasMp,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Nature Density") + xlab("Nature Density") + ylab("Species richness")
plot_1
# Plot a box-plot for Distance to coast
plot_2 <- ggplot(DK.Biodiv,
aes(x = Dis2Cost,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Distance to coast") + xlab("Distance to coast") + ylab("Species richness")
plot_2
# Plot a box-plot for Human Impact Index
plot_3 <- ggplot(DK.Biodiv,
aes(x = HII,
y = Log.S.AllGrp)) +
geom_point() + # Add the points
geom_smooth(method = lm) + # Add the regression
# Add the titles
ggtitle("Human Impact Index") + xlab("Human Impact Indext") + ylab("Species richness")
plot_3
plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, labels = c('A', 'B', 'C', 'D', 'E'))
ggplot(tibble(Lm.Resid,DK.Biodiv),
aes(x = Log.S.AllGrp, y = Lm.Resid)) +
# add the points
geom_point() +
#plot the smutter
geom_smooth() +
# Define the text to be added as main title and the x/y-axis label
ggtitle("All variables") + xlab("Log.S.AllGrp") + ylab("Residuals") +
# Add a horizontal line using the abline() function at zero for reference
geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
FullMod
plot(FullMod)
Stdz.DK.Biodiv <- DK.Biodiv[,c("Log.S.AllGrp", # the name of the response
PredNames)]# the name of the predictors
# Use the scale() function on Stdz.DK.Biodiv to scale the predictors
Stdz.DK.Biodiv <- scale(Stdz.DK.Biodiv)
# Print the Five first rows of Stdz.DK.Biodiv
head(Stdz.DK.Biodiv)
Stdz.Model <- lm(Log.S.AllGrp ~ NatDensBasMp + Dis2Cost + HII + Slope30mAgg + PrecSea,
data = as.data.frame(Stdz.DK.Biodiv)) # Call the object with the Scaled data
summary(Stdz.Model)
sum.par.lm <- summary(FullMod)
#2.  Store the summary of the regression carried out on standardised data (Stdz.Model). name this sum.par.lm.scaled
sum.par.lm.scaled <- summary(Stdz.Model)
#3. Create a vector called tolerances with the tolerance for each variable - use the function vif() for this
tolerances <- car::vif(Stdz.Model)
# Merge all the elements into a single data.frame
par.table <- cbind(sum.par.lm$coefficients[, 1:2], # un-standardised coefficients and SD
sum.par.lm.scaled$coefficients[, 1], # standardized coefficients
c(NA, tolerances), # Tolerances
sum.par.lm$coefficients[, 3:4]) # un-standardised coefficients T value and P value
colnames(par.table) <- c("Estimate", "Standard error", "Stdandard coefficient", "Tolerance", "t", "p")
round(par.table,3)
?kable
knitr::kable(round(par.table,3))
FrwdSel <- step(Stdz.Model, # an object representing a model to simplify
direction = "forward") # forward or backward
#extract the regression coefficients using the function coef()
coef(FrwdSel)
#Get the adjusted R-squared
summary(FrwdSel)$adj.r.squared
BackSel <- step(Stdz.Model, # an object representing a model to simplify
direction = "backward",
na.rm=T) # forward or backward
#extract the regression coefficients using the function coef()
coef(BackSel)
#Get the adjusted R-squared
summary(BackSel)$adj.r.squared
