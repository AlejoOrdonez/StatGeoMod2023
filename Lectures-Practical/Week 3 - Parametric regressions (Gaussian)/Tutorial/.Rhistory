URL.Loc <- "https://raw.githubusercontent.com/AlejoOrdonez/StaGeoMod2021/main/paruelo.csv"
## Use `read.table` to load the file and save it as an object named green
## The file paruelo.csv is a Comma-separated file
paruelo <- read.table(file = URL.Loc,
header = T,
sep = ,",")
head(paruelo)
par()
?par
names(paruelo)
head(MAP)
head(paruelo)
paruelo$MAP
boxplot(paruelo$MAP)
names(paruelo)
boxplot(paruelo$MAT)
par(mfrow = c(3,2)) # you need to specify two values here the number of rows an the number of columns
# Make a boxplot for MAP
boxplot(paruelo$MAP)
# Make a boxplot for MAT
boxplot(paruelo$MAT)
# Make a boxplot for JJAMAP
boxplot(paruelo$JJAMAP)
# Make a boxplot for DJFMAP
boxplot(paruelo$DJFMAP)
# Make a boxplot for LONG
boxplot(paruelo$LONG)
# Make a boxplot for LAT
boxplot(paruelo$LAT)
?boxplot
boxplot(paruelo$MAP,
xlab = "MAP")
par(mfrow = c(3,2)) # you need to specify two values here the number of rows an the number of columns
# Make a boxplot for MAP
boxplot(paruelo$MAP,
xlab = "MAP")
# Make a boxplot for MAT
boxplot(paruelo$MAT)
# Make a boxplot for JJAMAP
boxplot(paruelo$JJAMAP)
# Make a boxplot for DJFMAP
boxplot(paruelo$DJFMAP)
# Make a boxplot for LONG
boxplot(paruelo$LONG)
# Make a boxplot for LAT
boxplot(paruelo$LAT)
par(mfrow = c(1,1))
boxplot(paruelo$MAP,
main = "MAP")
names(paruelo)
par(mfrow = c(3,2)) # you need to specify two values here the number of rows an the number of columns
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an interator
for (i in PredNames){ # Here you need specify a object `in` range of values
boxplot(paruelo[,i], # What variable to plot using the itertor to specify the variable
main=i)  # add a title name using the iterator
}
par(mfrow=c(1,1))
par(mfrow = c(3,2),
mar=rep(2,4)) # you need to specify two values here the number of rows an the number of columns
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an interator
for (i in PredNames){ # Here you need specify a object `in` range of values
boxplot(paruelo[,i], # What variable to plot using the itertor to specify the variable
main=i)  # add a title name using the iterator
}
par(mfrow=c(1,1))
i
EvalVar <- paruelo[,i]
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = T) # is the sorting in (de)incresing
plot(EvalVar)
plot(t(EvalVar))
plot(EvalVar)
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(4,4)) # here you define the 'margins" - blank space between plotting areas)
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in decreasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = T) # is the sorting in (de)incresing order
plot(x = EvalVar,
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(2,4)) # here you define the 'margins" - blank space between plotting areas)
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in decreasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = T) # is the sorting in (de)incresing order
plot(x = EvalVar,
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(3,4)) # here you define the 'margins" - blank space between plotting areas)
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in decreasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = T) # is the sorting in (de)incresing order
plot(x = EvalVar,
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(4,4)) # here you define the 'margins" - blank space between plotting areas)
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in decreasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = T) # is the sorting in (de)incresing order
plot(x = EvalVar,
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(4,4)) # here you define the 'margins" - blank space between plotting areas)
# Create a object named PredNames that has the names of the variables you want to plot.
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in increasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = F) # is the sorting in (de)incresing order
plot(x = EvalVar, # the values
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in increasing order for this you need to use the function sort()
#EvalVar <- sort(EvalVar, # define the object to be sorted
#                decreasing = F) # is the sorting in (de)incresing order
plot(x = EvalVar, # the values
y = 1:length(EvalVar),
xlab = i,
ylab = "Order of the data")
}
names(paruelo)
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in increasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = F) # is the sorting in (de)increasing order
plot(x = EvalVar, # the values of the variable of interest
y = 1:length(EvalVar), # a vector with the Order of the data
xlab = i, # set the x-axis label to the name of the variable
ylab = "Order of the data") # set the y-axis label to "Order of the data"
}
?round
?cor.test
URL.Loc <- "https://raw.githubusercontent.com/AlejoOrdonez/StaGeoMod2021/main/paruelo.csv"
## Use `read.table` to load the file and save it as an object named green
## The file paruelo.csv is a Comma-separated file
paruelo <- read.table(file = URL.Loc,
header = T,
sep = ,",")
head(paruelo)
head(mtcars)
boxplot(mtcars$mpg)
?boxplot
par(mfrow = c(3,2),# you need to specify two values here the number of rows an the number of columns
mar=rep(4,4)) # here you define the 'margins" - blank space between plotting areas)
# Create an object named PredNames that has the names of the variables you want to plot.
PredNames <- c("MAP", # Mean annual precipitation (mm) variable as in the paruelo object.
"MAT", #  mean annual temperature (oC) variable as in the paruelo object.
"JJAMAP", #  proportion of MAP that fell in June, July and August variable as in the paruelo object.
"DJFMAP", #  proportion of MAP that fell in December, January and February variable as in the paruelo object.
"LONG", #  longitude variable as in the paruelo object.
"LAT") #  latitude variable as in the paruelo object.
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in increasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = F) # is the sorting in (de)increasing order
plot(x = EvalVar, # the values of the variable of interest
y = 1:length(EvalVar), # a vector with the Order of the data
xlab = i, # set the x-axis label to the name of the variable
ylab = "Order of the data") # set the y-axis label to "Order of the data"
}
par(mfrow = c(3,2), mar=rep(4,4)) # here you define the 'margins" - blank space between plotting areas)
# Create an object named PredNames that has the names of the variables you want to plot.
PredNames <- c("MAP",
"MAT",
"JJAMAP",
"DJFMAP",
"LONG",
"LAT")
# initialize your loop using i as an iterator
for (i in PredNames){ # Here you need specify a object `in` range of values
# Create and object names EvalVar with the variables of interest
EvalVar <- paruelo[,i]
# Sort the EvalVar object in increasing order for this you need to use the function sort()
EvalVar <- sort(EvalVar, # define the object to be sorted
decreasing = F) # is the sorting in (de)increasing order
plot(x = EvalVar, # the values of the variable of interest
y = 1:length(EvalVar), # a vector with the Order of the data
xlab = i, # set the x-axis label to the name of the variable
ylab = "Order of the data") # set the y-axis label to "Order of the data"
}
bolger <- read.csv("https://raw.githubusercontent.com/AlejoOrdonez/StaGeoMod2021/main/bolger.csv")
head(bolger)
boxplot(bolger$PERSHRUB)
par(mfrow=c(1,3))
# Boxplot for distance (meters) of the fragment
boxplot(bolger$PERSHRUB,
mian = "distance (meters) of the fragment")
boxplot(bolger$PERSHRUB,
main = "distance (meters) of the fragment")
par(mfrow=c(1,3))
# Boxplot for distance (meters) of the fragment
boxplot(bolger$DISTX,
main = "distance (meters) of the fragment")
# Boxplot for Years since the fragment was isolated
boxplot(bolger$AGE,
main = "Isolation time")
# Boxplot for percentage of the fragment area covered in shrubs
boxplot(bolger$PERSHRUB,
main = "Shrub cover")
names(mtcars)
head(mtcars)
cor(mtcars[,c("mpg","cyl", "disp")])
?cor
cor(bolger[, c("DISTX", "AGE", "PERSHRUB")],
method = "spearman")
cor(bolger[, c("DISTX", "AGE", "PERSHRUB")],
method = "pearson")
pairs(pred.bolger,
panel = panel.smooth,
cex = 1.5, pch = 24,
bg = "light blue",
horOdd = TRUE,
diag.panel = panel.hist,
cex.labels = 2, font.labels = 2)
pairs(bolger[, c("DISTX", "AGE", "PERSHRUB")],
panel = panel.smooth,
cex = 1.5, pch = 24,
bg = "light blue",
horOdd = TRUE,
diag.panel = panel.hist,
cex.labels = 2, font.labels = 2)
?panel.hist
?pairs
cor(bolger[, c("DISTX", "AGE", "PERSHRUB")],
method = "pearson")
lapply(mtcars,
mean)
ls()
names(bolger)
par(mfrow = c(1, 3))
for (Var in c('DISTX', 'AGE', 'PERSHRUB')){ # define a vector with the names of the predictors
# Scatter plot of RODENTSP vs the evaluated predictor using the test.Formula object to determine what to plot
plot(x = bolger[,Var], # Predictor variable
y = bolger[,"RODENTSP"], # resposne
pch = 19) # make the points filled circles
}
abline(lm(Test.Formula,
data = bolger), ## the lm object to plot
col = "red", # the colour of the line
lwd = 2,  # the width of the line
lty = 2) # the type of the line
line(x = bolger[,Var], # Predictor variable
y = bolger[,"RODENTSP"] # response
)
Reg.Tmp <- line(x = bolger[,Var], # Predictor variable
y = bolger[,"RODENTSP"] # response
)
abline(Reg.Tmp, ## the line object to plot
col = "red", # the colour of the line
lwd = 2,  # the width of the line
lty = 2) # the type of the
plot(x = mtcars$cyl,
y = mtcars$mpg)
?line
line(x = mtcars$cyl,
y = mtcars$mpg)
?boxplot
var <- "DISTX"
Var <- "DISTX"
boxpot(y = bolger[,Var], # Predictor variable
x = bolger[,"RODENTSP"], # response
pch = 19) # make the points filled circles
boxplot(y = bolger[,Var], # Predictor variable
x = bolger[,"RODENTSP"], # response
pch = 19) # make the points filled circles
bolger[,"RODENTSP"]
bolger[,Var]
boxplot(y = bolger[,Var], # Predictor variable
x = factor(bolger[,"RODENTSP"]), # response
pch = 19) # make the points filled circles
boxplot(Test.Formula, # The formula
data = bolger)
Test.Formula <-  formula(paste("RODENTSP ~", Var)) # here the paste() function links together "RODENTSP ~" which is text and Var that is the iterator/counter
boxplot(Test.Formula, # The formula
data = bolger)
Var
Test.Formula <-  formula(paste(Var" ~RODENTSP")) # here the paste() function links together "RODENTSP ~" which is text and Var that is the iterator/counter
Test.Formula <-  formula(paste(Var" ~RODENTSP")) # here the paste() function links together
Test.Formula <-  formula(paste(Var,"~RODENTSP")) # here the paste() function links together "RODENTSP ~" which is text and Var that is the iterator/counter
boxplot(Test.Formula, # The formula
data = bolger)
par(mfrow = c(1, 3))
for (Var in c('DISTX', 'AGE', 'PERSHRUB')){ # define a vector with the names of the predictors
# As you will be iterating over different predictors is now a good time to learn about the formula() function.
# the formula() function defines a formula from a text string or extracts the formulae included in other objects.
Test.Formula <-  formula(paste(Var,"~RODENTSP")) # here the paste() function links together "RODENTSP ~" which is text and Var that is the iterator/counter
boxplot(Test.Formula, # The formula
data = bolger)
}
formula("y ~ x")
names(mtcars)
Form1 <- formula("mpg~am")
boxplot(Form1,
data = mtcars)
paste("a","~","b")
line(x = mtcars$cyl,
y = mtcars$mpg)
glm(mpg ~ am + cyl + disp,
family = "gaussian",
data = mtcars)
bolger.glm <- glm(RODENTSP ~ DISTX + AGE + PERSHRUB, # the Equations defining the response and additive combination of predictors
data = bolger, # specify the Object where the data is in
family = "binomial") # Argument defining the adequate error `family` given the
bolger.glm
coef(bolger.glm)
Summ.bolger.glm <- summary(bolger.glm)
#Call the glm model
Summ.bolger.glm
coef(Summ.bolger.glm)
Summ.bolger.glm <- summary(bolger.glm)
Summ.bolger.glm
# Now extract the coefficients from Summ.bolger.glm with the coef() function. save this as an object named Coef.bolger.glm
Coef.Summ.bolger.glm <- coef(Summ.bolger.glm)
# print Coef.Summ.bolger.glm, but round all numbers to 3 decimal points
round(x = Coef.Summ.bolger.glm, # What to round?
digits = 3) #
bolger.glm
anova(bolger.glm,Const.glm)
Const.glm <- glm(RODENTSP ~ 1,  # the Equations defining the response as a function of NO predictor
data = bolger, # specify the object where the data is in
family = "binomial") # Argument defining the adequate error `family` given the
anova(bolger.glm,Const.glm)
anova(bolger.glm,Const.glm,test="chi")
anova(bolger.glm,Const.glm,test="Chisq")
?anova
step(bolger.glm)
?step
coef(step(bolger.glm, diretion="backward"))
coef(a<-step(bolger.glm, diretion="backward"))
a
coef(a<-step(bolger.glm, diretion="forward"))
a
bolger.glm.Back <- setp(bolger.glm,
direction = "backward")
bolger.glm.Back <- step(bolger.glm,
direction = "backward")
# Call bolger.glm.Back
bolger.glm.Back
step(lm(mpg ~ am + cyl + disp, data = mtcars))
bolger.glm.Back <- step(bolger.glm,
direction = "both")
# Call bolger.glm.Back
bolger.glm.Back
bolger.glm.Frwd <- step(bolger.glm,
direction = "forward")
# Call bolger.glm.Back
bolger.glm.Frwd
bolger.glm.Back <- step(bolger.glm,
direction = "backward")
# Call bolger.glm.Back
bolger.glm.Back
anove(bolger.glm.Back,bolger.glm.Frwd,test="chi")
anova(bolger.glm.Back,bolger.glm.Frwd,test="chi")
anova(bolger.glm.Back,bolger.glm.Frwd,test="Chisq")
bolger.glm.Back
34.62/20.05
bolger.glm.Frwd
34.62/19.36
