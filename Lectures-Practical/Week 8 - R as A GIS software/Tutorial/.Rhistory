which(is.na(x))})# test for each column the rows with no values
ok <- complete.cases(BFC)
# Print the row.ids of those sightings with no information
which(!ok)
par(mar = c(2, 2, 6, 2), xaxs = "i", yaxs = "i")
# Plot the Area of interest
plot(NoAmPoly.AEA,
col = 'lightgrey', # make the continual areas lightgrey
bg = 'lightblue', # Make the oceans blue
xlim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 1]), # Set limits to zoom into the region with points
ylim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 2]), # Set limits to zoom into the region with points
main = "Bigfoot sigthings\n[1869 to 2017]",
cex.main = 1.2)
box()
# Add some tick marks to define the latitude-longitude point
# Note that these commands are separated with a semicolon (this allows to put consecutive functions in one line)
axis(1, labels = NA); axis(2, labels = NA); axis(3, labels = NA); axis(4, labels = NA)
# Plot Bigfoot sightings
points(Bigfoot.SpaPnt.AEA ,
col = "red")
## Show the sites with no environmental data
points(Bigfoot.SpaPnt.AEA[c(3595, 3682), ] ,
pch = 18,
col = "black")
# Add the Latitudes and longitudes
lines(Lat.Long.Lines.AEA,
lty = 2)
par(mar = c(2, 2, 6, 2), xaxs = "i", yaxs = "i")
# Plot the Area of interest
plot(NoAmPoly.AEA,
col = 'lightgrey', # make the continual areas lightgrey
bg = 'lightblue', # Make the oceans blue
xlim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 1]), # Set limits to zoom into the region with points
ylim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 2]), # Set limits to zoom into the region with points
main = "Bigfoot sigthings\n[1869 to 2017]",
cex.main = 1.2)
box()
# Add some tick marks to define the latitude-longitude point
# Note that these commands are separated with a semicolon (this allows to put consecutive functions in one line)
axis(1, labels = NA); axis(2, labels = NA); axis(3, labels = NA); axis(4, labels = NA)
# Plot Bigfoot sightings
points(Bigfoot.SpaPnt.AEA ,
pch=19,
col = "red")
## Show the sites with no environmental data
points(Bigfoot.SpaPnt.AEA[c(3595, 3682), ] ,
pch = 18,
col = "black")
# Add the Latitudes and longitudes
lines(Lat.Long.Lines.AEA,
lty = 2)
points(Bigfoot.SpaPnt.AEA[c(3595, 3682), ] ,
pch = 19,
cex=1.5,
col = "black")
# extent of all points
BFC.Extent <- extent(Bigfoot.SpaPnt)
# Print the Extent
BFC.Extent
# 5000 random samples (excluding NA cells) from extent e
set.seed(0) # to ensure that the example is reproducible
BFC.Bgr <- sampleRandom(x = WC.Bioclim, # Define the RasterLayer/Stack to be sampled.
size = 5000,  # Define the Number of samples to take.
ext = BFC.Extent, # Define the extent from which samples should be taken.
xy=TRUE # Restirn the coordinates of sampled cells?
)
# Capitalize x and y for consistency with the original data
colnames(BFC.Bgr)[1:2] <- c("X", "Y")
# Check the size of the random sample data.frame.
dim(BFC.Bgr)
# Explore the fist 6 rows of the random sample data.frame.
head(BFC.Bgr)
BFC
head(BFC)
# Use rbind() to merge the presence and random sample data.frames.
BF.Dist <- rbind(cbind(pa = 1, BFC), # The environmental data.frame for the presence sites
cbind(pa = 0, BFC.Bgr[,-c(1:2)])) # The environmental data.frame the background points
# Make sure that the resulting object is a data.frame
BF.Dist <- data.frame(BF.Dist)
# Check the size of the merged data.frame.
dim(BF.Dist)
BF.Dist.Pnts <- data.frame(x = c(Bigfoot.dta$X,BFC.Bgr[,"X"]),
y = c(Bigfoot.dta$Y,BFC.Bgr[,"Y"]),
pa = BF.Dist[,"pa"])
# Transform the data.frame into a SpatialPointsDataFrame
BF.Dist.Pnts <- SpatialPointsDataFrame(coords = BF.Dist.Pnts, # Define the spatial locations
data = BF.Dist.Pnts, # Define the data to be merged
proj4string=CRS(proj4string(Bigfoot.SpaPnt)) # Define the projection
)
BF.Dist.Pnts.AEA <- spTransform(x = BF.Dist.Pnts, # Define the Spatial object to be projected.
CRSobj = CRS(CRS.String) # Define the projection
)
BF.Dist.Pnts.AEA <- spTransform(x = BF.Dist.Pnts, # Define the Spatial object to be projected.
CRSobj = CRS(CRS.String) # Define the projection
)
par(mar = c(2, 2, 6, 2), xaxs = "i", yaxs = "i")
# Plot the Area of interest
plot(NoAmPoly.AEA ,
col = 'lightgrey', # make the continual areas lightgrey
bg = 'lightblue', # Make the oceans blue
xlim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 1]), # Set limits to zoom into the region with
ylim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 2]), # Set limits to zoom into the region with points
main = "Bigfoot sigthings and pseudosciences\n[1869 to 2017]",
cex.main = 1.2)
box(); axis(1, labels = NA); axis(2, labels = NA); axis(3, labels = NA); axis(4, labels = NA)
points(BF.Dist.Pnts.AEA,
pch = 19,
cex=0.5,
col = BF.Dist[,"pa"]+1)
BF.Dist.Pnts.AEA
BF.Dist[,"pa"]+1
?legend
legend("bottomleft", # Define the position the of the legend
col=1:2, # Define the colours of the points
pch=19, # Define the shape of the points
legend=c("Presence", "Pseudosciences") # Define the legend text
)
lines(Lat.Long.Lines.AEA ,
lty = 2)
?Lat.Long.Lines.AEA
Lat.Long.Lines.AEA
# Build a data.frame for the East Subspecies
BF.DistEast <- BF.Dist[Bigfoot.dta$Lon > -102, ]
# Build a data.frame for the West Subspecies
BF.DistWest <- BF.Dist[Bigfoot.dta$Lon <= -102, ]
# Laod the requires package (randomForest)
library(randomForest)
#Define the optimal number of Number of variables randomly sampled as candidates at each split (mtry)
trf <- tuneRF(x = BF.DistWest[, 2:ncol(BF.DistWest)] , # )], # Define the data frame with the predictions
y = BF.DistWest[, 'pa']  # Define the Presences-Absences
)
trf
## Extract the Number of variables randomly sampled as candidates at each split
mt <- trf[which.min(trf[, 2]), 1]
mt
# Build a RandomForest regression - use the Presences-Absences as values, so the model gives you an output similar to a probability of presence.
rrf <- randomForest(x = BF.DistWest[, 2:ncol(BF.DistWest)], # Define the data frame with the predictions
y = BF.DistWest[, 'pa'], # Define the Presences-Absences
mtry = mt # Define the selected optimal number of variables randomly sampled as candidates at each split.
)
# Print the model
rrf
varImpPlot(BF.rrf)
BF.rrf <- randomForest(x = BF.DistWest[, 2:ncol(BF.DistWest)], # Define the data frame with the predictions
y = BF.DistWest[, 'pa'], # Define the Presences-Absences
mtry = mt # Define the selected optimal number of variables randomly sampled as candidates at each split.
)
# Print the model
BF.rrf
ew <- extent(Bigfoot.SpaPnt[c(coordinates(Bigfoot.SpaPnt)[, 1]<= -102), ])
# predict using the Random Forest
BF.rpWest <- predict(WC.Bioclim, # defines the predictors
model = BF.rrf, # defines the model
ext = ew # defines the area where predictions are done
)
plot(BF.rpWest , # Define the RasterLayer to be ploted.
main = "Random Forest Predictions\n [Western Subspecies]", # Define the main title
col = rev(hcl.colors(n = 50, palette = "Reds 3")) # Define a colour ramp palette
)
plot(NoAmPoly,
add = T)
# Load the required libarary (dismo)
library(dismo)
# define the Model performance uisng a Cross-validation approach
eva <- evaluate(p = BF.DistWest[BF.DistWest$pa == 1, ], # presence
a = BF.DistWest[BF.DistWest$pa == 0, ], # absence
model = BF.rrf # Define the fitted model
)
# Print the ModelEvaluation object
eva
tr <- threshold(eva)
# Print the estimated tresholds
tr
?evaluate
library(dismo)
# define the Model performance uisng a Cross-validation approach
BF.eva.West <- evaluate(p = BF.DistWest[BF.DistWest$pa == 1, ], # presence
a = BF.DistWest[BF.DistWest$pa == 0, ], # absence
model = BF.rrf # Define the fitted model
)
BF.eva.West
tr <- threshold(BF.eva.West)
tr
BF.tr.West <- threshold(BF.eva.West)
BF.tr.West
par(mfrow = c(3, 2), mar = rep(2, 4))
#Use a loop to do the cut-offs for each criteria
for (i in names(BF.tr.West)){
# Define the cut-off raster for the selected criteria
CF.rast.tmp <-  BF.rpWest > as.numeric(BF.tr.West[i])
# cut the cut-off raster
image(CF.rast.tmp, # Define the Raster layer to be plotted.
main = i, cex.main = 1.2 , # Define the main title (cut-off criteria) and font size.
col = c("NA", "red") # Define the colours for absent (NA) and present (red)
)
# add a map
plot(NoAmPoly, add = T)
}
# Add a legend
legend("bottomleft",
fil="red",
legend = "Presence")
names(BF.tr.West)
a <- lapply(names(BF.tr.West), function (i){ BF.rpWest > as.numeric(BF.tr.West[i])})
a
a <- do.call("stack",a)
a
plot(a)
CF.rast.List <- lapply(names(BF.tr.West),
function (i){
BF.rpWest > as.numeric(BF.tr.West[i])})
CF.rast <- do.call("stack",
CF.rast.List)
plot(CF.rast)
?do.call
CF.rast <- do.call(what = "stack", # Define the function to execute
args = CF.rast.List # Define on what should the function be excuted on.
)
plot(CF.rast)
CF.rast
BF.tr.West
names(CF.rast)
names(CF.rast) <- names(BF.tr.West)
plot(CF.rast)
BF.DistEast <- na.omit(BF.DistEast)
# define the Model performance using a Cross-validation approach
eva2 <- evaluate(p = BF.DistEast[BF.DistEast$pa == 1, ], # presence points
a = BF.DistEast[BF.DistEast$pa == 0, ], # absence points
model = BF.rrf)
# Print the ModelEvaluation object
eva2
ee <- extent(Bigfoot.SpaPnt[c(coordinates(Bigfoot.SpaPnt)[, 1]> -102), ])
ee
# predict using the Random Forest
rcusa <- predict(object = WC.Bioclim, # the predictors
model = BF.rrf, # the model
ext = ee) # the region to predict
plot(rcusa , # Define the RasterLayer to be ploted.
main = "Random Forest Predictions\n [Eastern Subspecies]", # Define the main title
col = rev(hcl.colors(n = 50, palette = "Reds 3")) # Define a colour ramp palette
)
plot(NoAmPoly,
add = T)
# plot the predicted raster
plot(rcusa , # Define the RasterLayer to be ploted.
main = "Random Forest Predictions\n [Eastern Subspecies]", # Define the main title
col = rev(hcl.colors(n = 50, palette = "Reds 3")) # Define a colour ramp palette
)
# add a map
plot(NoAmPoly,
add = T)
## Add the Eastern presence points  for reference
points(Bigfoot.SpaPnt[c(coordinates(Bigfoot.SpaPnt)[, 1]> -102), ], # Define the SpatialPointsDataFrame to plot.
pch = 19,# Define the mark to plot.
cex = .25 # Determine the size of the mark
)
# add a map
plot(NoAmPoly,
add = T)
WC.BioclimFut <- getData('CMIP5',
res = 10,
var = 'bio',
rcp = 85,
model = 'AC',
year = 70)
# Print the names of the climate projection
names(WC.BioclimFut)
?getData
## Get the Values for future climates fro 2070, for the RCP 8.5 and the AC model
WC.BioclimFut <- getData(name = 'CMIP5', # Define the Data set name
res = 10, # Define the resolution - 10 Arcmin
var = 'bio', # Define the variable to be downloaded.
rcp = 85, # Define the future scenario
model = 'AC', # Define the GCM
year = 70 # Define the year
)
# Print the names of the climate projection
names(WC.BioclimFut)
## Standardise the names so that the new data.frame has the same names as the ones used in the model
names(WC.BioclimFut) <- names(WC.Bioclim)
# Predict the future distribution of the
BF.rpWestFut <- predict(object = WC.BioclimFut, # Deifne the RasterStak with the predictors
model = BF.rrf, # Define the model to use
ext = ew # Define the extent to limit the prediction to a sub-region
)
# Print the Predicted raster
BF.rpWestFut
par(mfrow = c(3, 1))
## current Range
plot(BF.rpWest, # Raster object to plot
main = "Current range Bigfoot\n [Western Subspecies]", # Define a main title
col = rev(hcl.colors(n = 50, palette = "Reds 3")) # Define the colours.
)
plot(NoAmPoly, add = T)
Lat.List <- lapply(seq(0, 90, by = 10), # These are 0 to 90 to focus on the Northern hemisphere
function(Lat){
Line(cbind(x = c(-180, 0), # These are -180 to 0 to focus on the western hemisphere
y = Lat))
})
# Create a LineS object for latitudes using the list of Line objects for latitude
Lat.Lines.List <- Lines(Lat.List, ID = "Lats")
# Create a list of Line objects for Longitude between 180 and 0 separated by 10DD
Lon.List <- lapply(seq(-180, 0, by = 10), # These are -180 to 0 to focus on the western hemisphere
function(Lon){
Line(cbind(x = Lon,
y = c(0, 90)))
Lon.Lines.List <- Lines(Lon.List, ID = "Long")
## Create the final SpatialLines object by merging LineS object
Lat.Long.Lines <- SpatialLines(list(Lat.Lines.List ,
Lon.Lines.List),
proj4string = CRS(proj4string(wrld_simpl))) # This last argument
Lat.List <- lapply(seq(0, 90, by = 10), # These are 0 to 90 to focus on the Northern hemisphere
function(Lat){
Line(cbind(x = c(-180, 0), # These are -180 to 0 to focus on the western hemisphere
y = Lat))
})
Lat.Lines.List <- Lines(Lat.List, ID = "Lats")
Lon.List <- lapply(seq(-180, 0, by = 10), # These are -180 to 0 to focus on the western hemisphere
function(Lon){
Line(cbind(x = Lon,
y = c(0, 90))) # These are 0 to 90 to focus on the Northern hemisphere
})
# Create a LineS object for longitudes using the list of Line objects for longitude
Lon.Lines.List <- Lines(Lon.List, ID = "Long")
Lat.Long.Lines <- SpatialLines(list(Lat.Lines.List ,
Lon.Lines.List),
proj4string = CRS(proj4string(wrld_simpl))) # This last argument
plot(wrld_simpl, # Define the SpatialPolygonsDataFrame to plot
col = 'lightgrey', # make the continental areas light-grey
bg = 'lightblue', # Make the oceans blue
)
lines(Lat.Long.Lines , # Define the SpatialLines object to plot
col = "red" # Define the colour of the lines.
)
plot(NoAmPoly.AEA ,
col = 'lightgrey', # make the continual areas light grey
bg = 'lightblue', # Make the oceans blue
xlim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 1]), # Set limits to zoom into the region with points
ylim = range(coordinates(Bigfoot.SpaPnt.AEA)[, 2]), # Set limits to zoom into the region with points
main = "Bigfoot sigthings\n[1869 to 2017]",  # Define a main title for the Map
cex.main = 1.2 # Size of the text for the Main title
)
# Add a bounding box, some tick marks to define the latitude-longitude point
box(); axis(1, labels = NA); axis(2, labels = NA); axis(3, labels = NA); axis(4, labels = NA)
# Note that these commands are separated with a semicolon (this allows to put consecutive functions in one line)
# Plot Bigfoot sightings as red-filled points
points(Bigfoot.SpaPnt.AEA , # Define the SpatialPointsDataFrame to plot
pch = 19, # Make the marks filled points.
col = "red" # Make the colour of the marks red.
)
# Add the Latitudes and longitudes as black dashed lines
lines(Lat.Long.Lines.AEA , # Define the SpatialLines to plot
lty = 2 # Make the lines dashed
)
# Add a legend stating what are the Red dots
legend("bottomleft",
pch = 19, col = "red",
legend = "Bigfoot sightings")
WC.Bioclim <- getData(name = 'worldclim', # Define the Data set name.
res = 10, ## This defines the resolution of the Imported raster (10ArcMis)
var = 'bio') ## This defines that BioClimatic variables are imported
?aper
?ape
?diag
??knearneigh
?moran
?Szero
?Variogram
CRS.String <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_def"
Bigfoot.dta <- read.csv("https://opendata.arcgis.com/datasets/9947fc49e6c44120b4a1b3133c073dbc_0.csv")
Bigfoot.SpaPnt <- SpatialPointsDataFrame(coords = Bigfoot.dta[, c("Lon", "Lat")] ,
proj4string = CRS("+proj=longlat +datum=WGS84"),
data = Bigfoot.dta)
library(learnr)
library(tidyverse)
library(raster)
library(rgdal)
library(sp)
library(maptools)
library(mapview)
# options
knitr::opts_chunk$set(echo = FALSE)
gradethis::gradethis_setup()
# Load the Base information
CRS.String <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_def"
Bigfoot.dta <- read.csv("https://opendata.arcgis.com/datasets/9947fc49e6c44120b4a1b3133c073dbc_0.csv")
Bigfoot.SpaPnt <- SpatialPointsDataFrame(coords = Bigfoot.dta[, c("Lon", "Lat")] ,
proj4string = CRS("+proj=longlat +datum=WGS84"),
data = Bigfoot.dta)
Bigfoot.SpaPnt.AEA <- spTransform(x = Bigfoot.SpaPnt ,
CRSobj = CRS(CRS.String))
data(wrld_simpl)
wrld.AEA <- spTransform(x = wrld_simpl, CRSobj = CRS(CRS.String))
NoAmPoly <- wrld_simpl[wrld_simpl@data[, "NAME"]%in%c("Canada", "United States", "Mexico"), ]
NoAmPoly.AEA <- spTransform(x = NoAmPoly , # The object to "re-project".
CRSobj = CRS(CRS.String))
WC.Bioclim <- stack("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Tutorial/Week 2 - R as A GIS software/Tutorial/Data/Bioclim.tif")
dir("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Tutorial/Week 2 - R as A GIS software/Tutorial/Data")
WC.Bioclim <- stack("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Practical/Week 2 - R as A GIS software/Tutorial/Data/Bioclim.tif")
library(raster)
library(raster)
WC.Bioclim <- stack("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Practical/Week 2 - R as A GIS software/Tutorial/Data/Bioclim.tif")
WC.Tmin <- stack("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Practical/Week 2 - R as A GIS software/Tutorial/Data/tmin.tif")
WC.Tmax <- stack("~/Dropbox/Courses_&_Conferences/2022/Courses/Statistical and Geospatial Modeling/Lectures-Practical/Week 2 - R as A GIS software/Tutorial/Data/tmax.tif")
NoAm.WC.Bioclim <- crop(x= WC.Bioclim, y = Bigfoot.SpaPnt)
remotes::install_github("rstudio/gradethis")
library(learnr)
library(tidyverse)
library(raster)
Bigfoot.SpaPnt <- readRDS("data/Bigfoot.SpaPnt.rds")
library(sp)
install.packages(c("sp", "maptools", "raster", "rgdal"))
install.packages(c("cluster", "dplyr", "gtable", "MASS", "nlme", "rlang", "rversions", "survival"))
install.packages(c("cluster", "dplyr", "gtable", "MASS", "nlme", "rlang", "rversions", "survival"))
install.packages(c("cluster", "dplyr", "gtable", "MASS", "nlme", "rlang", "rversions", "survival"))
CRS.String <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_def"
Bigfoot.dta <- read.csv("https://opendata.arcgis.com/datasets/9947fc49e6c44120b4a1b3133c073dbc_0.csv")
Bigfoot.SpaPnt <- readRDS("data/Bigfoot.SpaPnt.rds")
Bigfoot.SpaPnt.AEA <-readRDS("data/Bigfoot.SpaPnt.AEA.rds")
data(wrld_simpl)
library(maptools)
data(wrld_simpl)
wrld.AEA <- readRDS("data/wrld.AEA.rds")
NoAmPoly <- readRDS("data/NoAmPoly.rds")
NoAmPoly.AEA <- readRDS("data/NoAmPoly.AEA.rds")
library(sp)
Bigfoot.SpaPnt <- readRDS("Data/Bigfoot.SpaPnt.rds")
# Load the Base information
CRS.String <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_def"
Bigfoot.dta <- read.csv("https://opendata.arcgis.com/datasets/9947fc49e6c44120b4a1b3133c073dbc_0.csv")
Bigfoot.SpaPnt <- readRDS("Data/Bigfoot.SpaPnt.rds")
Bigfoot.SpaPnt.AEA <-readRDS("Data/Bigfoot.SpaPnt.AEA.rds")
NoAmPoly <- readRDS("Data/NoAmPoly.rds")
NoAmPoly.AEA <- readRDS("Data/NoAmPoly.AEA.rds")
# Load packages
library(sp)
# options
knitr::opts_chunk$set(echo = FALSE)
summary(NoAmPoly)
names(NoAmPoly)
names(NoAmPoly)
Bigfoot.SpaPnt.AEA <- spTransform(x = Bigfoot.SpaPnt , # Define the object to (re)projected.
CRSobj = CRS(CRS.String) # Define the projection to be used.
)
CRS.String
Bigfoot.SpaPnt
proj4string(Bigfoot.SpaPnt.AEA)
?spTransform
Bigfoot.SpaPnt
class(Bigfoot.SpaPnt)
class(Bigfoot.SpaPnt)
Bigfoot.SpaPnt
summary(library(raster))
summary(Bigfoot.SpaPnt)
library(raster)
Bigfoot.SpaPnt
Bigfoot.SpaPnt.AEA <- spTransform(x = Bigfoot.SpaPnt , # Define the object to (re)projected.
CRSobj = CRS(CRS.String) # Define the projection to be used.
)
# Print the new projection
proj4string(Bigfoot.SpaPnt.AEA)
projection(Bigfoot.SpaPnt.AEA)
porjection(Bigfoot.SpaPnt)
projection(Bigfoot.SpaPnt)
?getData
# Load packages
library(raster)
library(rgdal)
library(sp)
# options
knitr::opts_chunk$set(echo = FALSE)
# Load the Base information
CRS.String <- "+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_def"
Bigfoot.SpaPnt <- readRDS("data/Bigfoot.SpaPnt.rds")
Bigfoot.SpaPnt.AEA <-readRDS("data/Bigfoot.SpaPnt.AEA.rds")
NoAmPoly.AEA <- readRDS("data/NoAmPoly.AEA.rds")
WC.Bioclim <- stack("data/Bioclim.tif")
NoAm.WC.Tmin <- stack("data/NoAm.tmin.tif")
getwd()
dir()
WC.Bioclim <- getData(name = 'worldclim', # Define the Data set name.
res = 10, ## This defines the resolution of the Imported raster (10ArcMis)
var = 'bio', ## This defines that BioClimatic variables are imported
path="Data/")
par(mfrow = c(1, 2))
# plot Annual Mean Temperature (WorldClim temp are C*10 so you need to do some operations before plotting).
# Define a divergent blue-to-grey-to-red HCL palette with 50 values.
plot(WC.Bioclim[[1]]/10, # Define the Layer from WC.Bioclim to plot. I divide the value by 10 as WorldClim temp are C*10 (to avoid using Floating Numbers)
main = "Annual Mean Temperature\n[C]", # Set the Figure title
cex.main = 1.2, # Define the Title font size
col = hcl.colors(n = 50 , palette = "Blue-Red") # Define a divergent HCL palette with 50 values.
)
plot(WC.Bioclim[[12]], # Define the Layer from WC.Bioclim to plot.
main = "Total Annual Precipitation\n[mm/yr]", # Set the Figure title
cex.main = 1.2,# Define the Title font size
col = rev(hcl.colors(n = 50 ,palette = "Blue-Red")) # Define a divergent HCL palette with 50 values.
)
class(WC.Bioclim)
WC.Bioclim
WC.Bioclim <- getData(name = 'worldclim', # Define the Data set name.
res = 10, # This defines the resolution of the Imported raster (10ArcMis)
var = 'bio', # This defines that BioClimatic variables are imported
path="Data/")
plot(WC.Bioclim[[1]]/10, # Define the Layer from WC.Bioclim to plot. I divide the value by 10 as WorldClim temp are C*10 (to avoid using Floating Numbers)
main = "Annual Mean Temperature\n[C]", # Set the Figure title
cex.main = 1.2, # Define the Title font size
col = hcl.colors(n = 50 , palette = "Blue-Red") # Define a divergent HCL palette with 50 values.
)
rm(lis=ls())
rm(list=ls())
rm(list=ls())
gc()
