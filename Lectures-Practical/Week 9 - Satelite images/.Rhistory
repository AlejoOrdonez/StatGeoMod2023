green <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B3.TIF") # Load the Green Band
red <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B4.TIF")# Load the Red Band
rgb.Scene <- stack(red, green, blue) # Stack the Blue, Green & Red Bands
# Plot the three bands into a single composite
plotRGB(rgb.Scene, # RasterStack with all the bands
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat Scene" # add a title
)
boundary = raster(ymx=56.36, # maximum y coordinate (top border)
xmn=10.09, # minimum x coordinate (left border)
ymn=56.06, #minimum y coordinate (bottom border)
xmx=10.65 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
56.36-56.06
10.09-10.65
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch="lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Linear stretch "# add a title
)
# Histogram stretching - even spacing across the range
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n histogram stretch "# add a title
)
?plotRGB
?axes
?axis
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, labels = F,
main="Landsat - Aarhus\n histogram stretch "# add a title
)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
# Gamma correction
blue <- AarhusReg[[3]]
green <- AarhusReg[[2]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Do a Gamma-transformation
blue.Gamma = blue^0.95
green.Gamma = green^0.5
red.Gamma = red^0.5
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# Plot the RGB composite
plotRGB(rgb.Gamma, # RasterStack
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Gamma stretch "# add a title
)
rgb.Nat.Color <- brick("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
y = boundary # Extent object
)
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary # Extent object
)
#plot the RGB composite
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image" # Add main title
)
near.infrared = raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
# Crop the near infrared Raster
near.infrared = crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Color Infrared combination
rgb.ColInf = stack(near.infrared, # near infrared
AarhusReg[[1]], # red
AarhusReg[[2]] # green
)
# Plot the Color Infrared combination raster stack
plotRGB(rgb.ColInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Color Infrared "# add a title
)
# Load the Short-Wave Infrared 1
sw.infrared.1 = raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B6.TIF")
# Crop the Short-Wave Infrared 1
sw.infrared.1 = crop(x = sw.infrared.1, # Raster* object to crop
y = boundary # Extent object
)
# Load the Short-Wave Infrared 2
sw.infrared.2 = raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B7.TIF")
# Crop the Short-Wave Infrared 2
sw.infrared.2 = crop(x = sw.infrared.2, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Short-Wave Infrared combination
rgb.SwInf = stack(sw.infrared.1, # Short-Wave Infrared 1
sw.infrared.2, # Short-Wave Infrared 2
AarhusReg[[1]] # red
)
# Plot the Short-Wave Infrared combination raster stack
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
# Create a raster stack with the bands for a Agriculture combination
rgb.Agro = stack(sw.infrared.1, # Short-Wave Infrared 1
near.infrared, # near infrared
AarhusReg[[3]] # blue
)
# Plot the Agriculture combination raster stack
plotRGB(rgb.Agro, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Agriculture "# add a title
)
# Create a raster stack with the bands for a Geology combination
rgb.Geo = stack(sw.infrared.2, # Short-Wave Infrared 2
sw.infrared.1, # Short-Wave Infrared 1
AarhusReg[[3]] # blue
)
# Plot the Geology combination raster stack
plotRGB(rgb.Geo, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Geology "# add a title
)
coastal.bands = raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
# Crop the coastal bands Raster
coastal.bands = crop(x = coastal.bands, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Bathymetric combination
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands # coastal bands
)
# Plot the Bathymetric combination raster stack
plotRGB(rgb.Bati, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Bathymetric "# add a title
)
# Estimate NDVI
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
# Define a color palette that goes from red to darkcyan
# The colorRampPalette() is used to define 255 colors that are then passed with the raster to plot() a visualization of the NDVI raster.
colors = colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI, # raster object
zlim = c(0, 0.6), ## Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI - Aarhus" # Add a title
)
ls()
red1984 <- crop(red1984,
boundary)
red1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4")# Load the Red Band
red1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4")# Load
dir()
getwd()
dir("DataLS5")
red1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4.TIF")#
near.infrared <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF)
near.infrared <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF")
red1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4.TIF")# Load the Red Band
#Crop the rastwer
red1984 <- crop(red1984,
boundary)
plot(red1984)
near.infrared <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF")
#Crop the near.infrared Band raster
near.infrared <- crop(near.infrared,
boundary)
near.infrared.1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF")
#Crop the near.infrared Band raster
near.infrared.1984 <- crop(near.infrared.1984,
boundary)
red.1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4.TIF")
#Crop the Red Band raster
red.1984 <- crop(red.1984,
boundary)
NDVI.1984 <- (near.infrared.1984 - red.1984) / (near.infrared.1984 + red.1984)
NDVI.difference = NDVI - NDVI.1984
NDVI.difference
colors = colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI.difference, # raster object
zlim = c(0, 0.6), ## Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI Difference - Aarhus/n[2019 - 1984]" # Add a title
)
rgb.Nat.Color <- brick("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
library(raster)
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
getwd()
dir("./DataLS8")
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
install.packages(c("bookdown", "brew", "broom", "callr", "classInt", "cli", "cluster", "cpp11", "crayon", "curl", "desc", "dotCall64", "dplyr", "dtplyr", "evaluate", "forcats", "foreign", "gargle", "googlesheets4", "gtable", "haven", "hms", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "MASS", "Matrix", "MatrixModels", "modelr", "nlme", "nnet", "openssl", "pillar", "purrr", "raster", "readr", "readxl", "renv", "reprex", "rgdal", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "sf", "spatialreg", "spdep", "stringr", "survival", "terra", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "webshot", "wk", "xfun", "zoo"))
install.packages(c("bookdown", "brew", "broom", "callr", "classInt", "cli", "cluster", "cpp11", "crayon", "curl", "desc", "dotCall64", "dplyr", "dtplyr", "evaluate", "forcats", "foreign", "gargle", "googlesheets4", "gtable", "haven", "hms", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "MASS", "Matrix", "MatrixModels", "modelr", "nlme", "nnet", "openssl", "pillar", "purrr", "raster", "readr", "readxl", "renv", "reprex", "rgdal", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "sf", "spatialreg", "spdep", "stringr", "survival", "terra", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "webshot", "wk", "xfun", "zoo"))
install.packages(c("bookdown", "brew", "broom", "callr", "classInt", "cli", "cluster", "cpp11", "crayon", "curl", "desc", "dotCall64", "dplyr", "dtplyr", "evaluate", "forcats", "foreign", "gargle", "googlesheets4", "gtable", "haven", "hms", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "MASS", "Matrix", "MatrixModels", "modelr", "nlme", "nnet", "openssl", "pillar", "purrr", "raster", "readr", "readxl", "renv", "reprex", "rgdal", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "sf", "spatialreg", "spdep", "stringr", "survival", "terra", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "viridisLite", "vroom", "webshot", "wk", "xfun", "zoo"))
library(raster)
blue <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B2.TIF") # Load the Blue Band
green <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B3.TIF") # Load the Green Band
red <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B4.TIF")# Load the Red Band
rgb.Scene <- stack(red, green, blue) # Stack the Blue, Green & Red Bands
# Plot the three bands into a single composite
plotRGB(rgb.Scene, # RasterStack with all the bands
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat Scene" # add a title
)
boundary = raster(ymx=56.36, # maximum y coordinate (top border)
xmn=10.09, # minimum x coordinate (left border)
ymn=56.06, #minimum y coordinate (bottom border)
xmx=10.65 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch="lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Linear stretch "# add a title
)
# Histogram stretching - even spacing across the range
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n histogram stretch "# add a title
)
hist(AarhusReg)
# Assess the percentiles per band
quantile(AarhusReg,c(0,.5,.75,.90,1))
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
blue <- AarhusReg[[3]]
green <- AarhusReg[[2]]
red <- AarhusReg[[1]]
# Re-scale the values
blue <- ((blue - 7000) / 10000)
green <- ((green - 7000) / 10000)
red <- ((red - 7000) / 10000)
# Make negative values Zero
blue[blue < 0] <- 0
green[green < 0] <- 0
red[red < 0] <- 0
# Do a Gamma-transformation
blue.Gamma <- blue^0.95
green.Gamma <- green^0.5
red.Gamma <- red^0.5
# Stack the image
rgb.Gamma <- stack(red.Gamma,
green.Gamma,
blue.Gamma)
# Plot the RGB composite
plotRGB(rgb.Gamma, # RasterStack
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Gamma stretch "# add a title
)
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary # Extent object
)
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image" # Add main title
)
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image" # Add main title
stretch="lin" # How to stretch the values to increase the contrast of the image
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
stretch="lin" # How to stretch the values to increase the contrast of the image
)
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
stretch="hist" # How to stretch the values to increase the contrast of the image
)
# Load the Natural Color Image
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
# crop the Natural Color Image using the boundary raster
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary # Extent object
)
#plot the RGB composite
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
)
near.infrared <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
rgb.ColInf <- stack(near.infrared, # near infrared
AarhusReg[[1]], # red
AarhusReg[[2]] # green
)
near.infrared <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
# Crop the near infrared Raster
near.infrared <- crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
rgb.ColInf <- stack(near.infrared, # near infrared
AarhusReg[[1]], # red
AarhusReg[[2]] # green
)
# Plot the Color Infrared combination raster stack
plotRGB(rgb.ColInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes =TRUE, main = "Landsat - Aarhus\n Color Infrared "# add a title
)
sw.infrared.1 <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B6.TIF")
# Crop the Short-Wave Infrared 1
sw.infrared.1 <- crop(x = sw.infrared.1, # Raster* object to crop
y = boundary # Extent object
)
# Load the Short-Wave Infrared 2
sw.infrared.2 <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B7.TIF")
# Crop the Short-Wave Infrared 2
sw.infrared.2 <- crop(x = sw.infrared.2, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Short-Wave Infrared combination
rgb.SwInf <- stack(sw.infrared.1, # Short-Wave Infrared 1
sw.infrared.2, # Short-Wave Infrared 2
AarhusReg[[1]] # red
)
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes =TRUE, main = "Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
rgb.Agro <- stack(sw.infrared.1, # Short-Wave Infrared 1
near.infrared, # near infrared
AarhusReg[[3]] # blue
)
# Plot the Agriculture combination raster stack
plotRGB(rgb.Agro, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Agriculture "# add a title
)
rgb.Geo <- stack(sw.infrared.2, # Short-Wave Infrared 2
sw.infrared.1, # Short-Wave Infrared 1
AarhusReg[[3]] # blue
)
# Plot the Geology combination raster stack
plotRGB(rgb.Geo, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Geology "# add a title
)
# Load the near infrared Raster
coastal.bands <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
# Crop the coastal bands Raster
coastal.bands <- crop(x = coastal.bands, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Bathymetric combination
rgb.Bati <- stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands # coastal bands
)
# Plot the Bathymetric combination raster stack
plotRGB(rgb.Bati, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Bathymetric "# add a title
)
# Estimate NDVI
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
# Define a color palette that goes from red to dark cyan
# The colorRampPalette() is used to define 255 colors that are then passed with the raster to plot() a visualization of the NDVI raster.
colors <- colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI, # raster object
zlim = c(0, 0.6), # Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI - Aarhus" # Add a title
)
colors
colors <- colorRampPalette(c("red3", "white", "darkcyan"))(255)
# Estimate NDVI
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
plot(NDVI, # raster object
zlim = c(0, 0.6), # Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI - Aarhus" # Add a title
)
# Load the red band for 1984
red.1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B4.TIF")
#Crop the Red Band raster
red.1984 <- crop(red.1984,
boundary)
# Load the near.infrared band for 1984
near.infrared.1984 <- raster("./DataLS5/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF")
#Crop the near.infrared Band raster
near.infrared.1984 <- crop(near.infrared.1984,
boundary)
# Estimate NDVI for 1984
NDVI.1984 <- (near.infrared.1984 - red.1984) / (near.infrared.1984 + red.1984)
# Estimate the NDVI difference
NDVI.difference <- NDVI - NDVI.1984
# Define a color palette that goes from red to dark cyan
# The colorRampPalette() is used to define 255 colors that are then passed with the raster to plot() a visualization of the NDVI raster.
colors <- colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI.difference, # raster object
zlim = c(0, 0.6), # Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI Difference - Aarhus/n[2019 - 1984]" # Add a title
)
