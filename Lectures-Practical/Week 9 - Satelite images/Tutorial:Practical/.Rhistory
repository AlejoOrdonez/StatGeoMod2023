dir()
dir("./Images")
getwd()
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
#Load the Libraries
library(raster)
blue <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B2.TIF") # Load the Blue Band
green <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B3.TIF") # Load the Green Band
red <- raster("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_B4.TIF")# Load the Red Band
boundary = raster(ymx=56.26, # maximum y coordinate (top border)
xmn=10.19, # minimum x coordinate (left border)
ymn=56.16, #minimum y coordinate (bottom border)
xmx=10.55 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
rgb.Scene <- stack(red, green, blue) # Stack the Blue, Green & Red Bands
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
AarhusReg
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
boundary = raster(ymx=56.26, # maximum y coordinate (top border)
xmn=10.19, # minimum x coordinate (left border)
ymn=56.06, #minimum y coordinate (bottom border)
xmx=10.55 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
boundary = raster(ymx=56.16, # maximum y coordinate (top border)
xmn=10.19, # minimum x coordinate (left border)
ymn=56.06, #minimum y coordinate (bottom border)
xmx=10.29 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
boundary = raster(ymx=56.20, # maximum y coordinate (top border)
xmn=10.19, # minimum x coordinate (left border)
ymn=56.10, #minimum y coordinate (bottom border)
xmx=10.29 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
boundary = raster(ymx=56.20, # maximum y coordinate (top border)
xmn=10.09, # minimum x coordinate (left border)
ymn=56.10, #minimum y coordinate (bottom border)
xmx=10.29 # maximum x coordinate (right border)
)
# Project the boundary area
boundary = projectExtent(object = boundary, # Raster* object
crs = rgb.Scene@crs # Raster* object with the parameters to which 'from' should be projected
)
# Crop the Landsat image
AarhusReg = crop(x = rgb.Scene, # Raster* object
y = boundary # Extent object
)
# Plot the RGB composite
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch="lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Linear stretch "# add a title
)
dir(./Data)
dir("./Data")
(i<-dir("./Data")[1])
raster(paste0("./Data/",i))
?crop
for (i in dir("./Data")){#(i<-dir("./Data")[1])
crop(x = raster(paste0("./Data/",i)), # Raster* object
y = boundary, # Extent object
filename=paste0("./Data/",i))
}
for (i in dir("./Data")){#(i<-dir("./Data")[1])
crop(x = raster(paste0("./Data/",i)), # Raster* object
y = boundary, # Extent object
filename=paste0("./Data/",i),
overwrite=TRUE)
}
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
#Load the Libraries
library(raster)
blue <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B2.TIF") # Load the Blue Band
green <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B3.TIF") # Load the Green Band
red <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B4.TIF")# Load the Red Band
rgb.Scene <- stack(red, green, blue) # Stack the Blue, Green & Red Bands
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch="lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Linear stretch "# add a title
)
# Histogram stretching - even spacing across the range
plotRGB(AarhusReg, # Cropped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n histogram stretch "# add a title
)
hist(AarhusReg)
# Assess the percentiles per band
quantile(AarhusReg,c(0,.5,.75,.90,1))
plotRGB(AarhusReg - 5000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
plotRGB(AarhusReg - 5000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
blue <- AarhusReg[[3]]
green <- AarhusReg[[2]]
red <- AarhusReg[[1]]
# Re-scale the values
blue <- ((blue - 7000) / 10000)
green <- ((green - 7000) / 10000)
red <- ((red - 7000) / 10000)
# Make negative values Zero
blue[blue < 0] <- 0
green[green < 0] <- 0
red[red < 0] <- 0
# Do a Gamma-transformation
blue.Gamma <- blue^0.95
green.Gamma <- green^0.5
red.Gamma <- red^0.5
# Stack the image
rgb.Gamma <- stack(red.Gamma,
green.Gamma,
blue.Gamma)
# Plot the RGB composite
plotRGB(rgb.Gamma, # RasterStack
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Gamma stretch "# add a title
)
blue <- ((blue - 5000) / 10000)
green <- ((green - 5000) / 10000)
red <- ((red - 5000) / 10000)
# Make negative values Zero
blue[blue < 0] <- 0
green[green < 0] <- 0
red[red < 0] <- 0
# Do a Gamma-transformation
blue.Gamma <- blue^0.95
green.Gamma <- green^0.5
red.Gamma <- red^0.5
# Stack the image
rgb.Gamma <- stack(red.Gamma,
green.Gamma,
blue.Gamma)
# Plot the RGB composite
plotRGB(rgb.Gamma, # RasterStack
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Gamma stretch "# add a title
)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
)
rgb.Nat.Color <- stack("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
)
rgb.Nat.Color <- stack("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
rm(rgb.Nat.Color)
rgb.Nat.Color <- stack("./DataLS8/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
boundary
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary # Extent object
"./Data/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary ,# Extent object
"./Data/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
rm(rgb.Nat.Color)
rgb.Nat.Color <- stack("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_refl.TIF")
plotRGB(rgb.Nat.Color, # RasterStack
axes=T, main = "Landsat - Aarhus\nNatural Color Image", # Add main title
)
near.infrared <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
rgb.ColInf <- stack(near.infrared, # near infrared
AarhusReg[[1]], # red
AarhusReg[[2]] # green
)
plotRGB(rgb.ColInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes =TRUE, main = "Landsat - Aarhus\n Color Infrared "# add a title
)
sw.infrared.1 <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B6.TIF")
sw.infrared.1 <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B6.TIF")
# Load the Short-Wave Infrared 2
sw.infrared.2 <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B7.TIF")
sw.infrared.2 <- crop(x = sw.infrared.2, # Raster* object to crop
y = boundary # Extent object
)
rgb.SwInf <- stack(sw.infrared.1, # Short-Wave Infrared 1
sw.infrared.2, # Short-Wave Infrared 2
AarhusReg[[1]] # red
)
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes =TRUE, main = "Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
rgb.Agro <- stack(sw.infrared.1, # Short-Wave Infrared 1
near.infrared, # near infrared
AarhusReg[[3]] # blue
)
# Plot the Agriculture combination raster stack
plotRGB(rgb.Agro, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Agriculture "# add a title
)
rgb.Geo <- stack(sw.infrared.2, # Short-Wave Infrared 2
sw.infrared.1, # Short-Wave Infrared 1
AarhusReg[[3]] # blue
)
# Plot the Geology combination raster stack
plotRGB(rgb.Geo, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Geology "# add a title
)
coastal.bands <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
coastal.bands <- raster("./Data/LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
# Create a raster stack with the bands for a Bathymetric combination
rgb.Bati <- stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands # coastal bands
)
plotRGB(rgb.Bati, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g = 2, # Index of the Green channel in the RasterStack
b = 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes = TRUE, main = "Landsat - Aarhus\n Bathymetric "# add a title
)
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
# Define a color palette that goes from red to dark cyan
# The colorRampPalette() is used to define 255 colors that are then passed with the raster to plot() a visualization of the NDVI raster.
colors <- colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI, # raster object
zlim = c(0, 0.6), # Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI - Aarhus" # Add a title
)
red.1984 <- raster("./Data/LT05_L1TP_196021_19840425_20200918_02_T1_B4.TIF")
near.infrared.1984 <- raster("./Data/LT05_L1TP_196021_19840425_20200918_02_T1_B5.TIF")
NDVI.1984 <- (near.infrared.1984 - red.1984) / (near.infrared.1984 + red.1984)
NDVI.difference <- NDVI - NDVI.1984
# Define a color palette that goes from red to dark cyan
# The colorRampPalette() is used to define 255 colors that are then passed with the raster to plot() a visualization of the NDVI raster.
colors <- colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI.difference, # raster object
zlim = c(0, 0.6), # Range of values to plot
col = colors, # the color ramp
colNA = "black", # Make NA values Black
main = "NDVI Difference - Aarhus/n[2019 - 1984]" # Add a title
)
gc()
