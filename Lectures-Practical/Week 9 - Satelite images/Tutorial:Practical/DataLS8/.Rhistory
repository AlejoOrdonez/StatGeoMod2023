g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
axes=TRUE, main="Landsat - Aarhus"# add a title
)
plotRGB(AarhusReg, # Croped RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n histogram stretch "# add a title
)
plotRGB(AarhusReg - 5000, # Remove the lowest values
scale=12000, # Maximum (possible) value in the three channels
zlim=c(0, 12000) # Range of values to plot
)
hist(AarhusReg)
quantiles(AarhusReg)
quantile(AarhusReg)
plotRGB(AarhusReg - 6000, # Remove the lowest values
scale=10000, # Maximum (possible) value in the three channels
zlim=c(0, 10000) # Range of values to plot
)
plotRGB(AarhusReg - 2000, # Remove the lowest values
scale=10000, # Maximum (possible) value in the three channels
zlim=c(0, 10000) # Range of values to plot
)
plotRGB(AarhusReg - 7000, # Remove the lowest values
scale=10000, # Maximum (possible) value in the three channels
zlim=c(0, 10000) # Range of values to plot
)
quantile(AarhusReg)
42223-7000
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values to re scale to
scale=8000, # Maximum (possible) value in the three channels
zlim=c(0, 8000) # Range of values to plot
)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values to re scale to
scale=8000, # Maximum (possible) value in the three channels
zlim=c(0, 8000) # Range of values to plot
)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values to re scale to
scale=1000, # Maximum (possible) value in the three channels
zlim=c(0, 1000) # Range of values to plot
)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values to re scale to
scale=10000, # Maximum (possible) value in the three channels
zlim=c(0, 10000) # Range of values to plot
)
quantile(AarhusReg)
quantile(AarhusReg,c(0,.5,.75,.90,1))
blue <- AarhusReg[[1]]
green <- AarhusReg[[1]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
blue
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Gamma correction
blue <- AarhusReg[[1]]
green <- AarhusReg[[1]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Do a Gamma-transformation
blue = blue^0.95
green = green^0.5
red = red^0.4
# Stack the image
rgb.Gamma = stack(red, green, blue)
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
# Gamma correction
blue <- AarhusReg[[1]]
green <- AarhusReg[[1]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Do a Gamma-transformation
blue = blue^0.5
green = green^0.5
red = red^0.4
# Stack the image
rgb.Gamma = stack(red, green, blue)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
# Gamma correction
blue <- AarhusReg[[1]]
green <- AarhusReg[[1]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Do a Gamma-transformation
blue.Gamma = blue^0.5
green.Gamma = green^0.5
red.Gamma = red^0.4
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
blue.Gamma = blue^0.5
green.Gamma = green^0.95
red.Gamma = red^0.4
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
blue.Gamma = blue^0.5
green.Gamma = green^0.5
red.Gamma = red^0.5
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
blue.Gamma = blue^0.5
green.Gamma = green^0.5
red.Gamma = red^0.95
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
blue.Gamma = blue^2
green.Gamma = green^0.5
red.Gamma = red^0.5
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
blue.Gamma = blue^0.95
green.Gamma = green^0.5
red.Gamma = red^0.5
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
blue
blue <- AarhusReg[[1]]
green <- AarhusReg[[1]]
red <- AarhusReg[[1]]
red
green
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
red
green
blue
blue
green
blue <- AarhusReg[[3]]
green <- AarhusReg[[2]]
red <- AarhusReg[[1]]
# Rescale the values
blue = ((blue - 7000) / 10000)
green = ((green - 7000) / 10000)
red = ((red - 7000) / 10000)
## Make negative values Zero
blue[blue < 0] = 0
green[green < 0] = 0
red[red < 0] = 0
# Do a Gamma-transformation
blue.Gamma = blue^0.95
green.Gamma = green^0.5
red.Gamma = red^0.5
# Stack the image
rgb.Gamma = stack(red.Gamma,
green.Gamma,
blue.Gamma)
# PLot the RGB composite
plotRGB(rgb.Gamma, # Remove the lowest values
scale=1, # Maximum (possible) value in the three channels
zlim=c(0, 1) # Range of values to plot
)
rgb <- brick("LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
# crop the Natural Color Image using the boundary raster
rgb <- crop(x = rgb, # Raster* object to crop
y = boundary # Extent object
)
rgb.Nat.Color <- brick("LC08_L1TP_196021_20190629_20200827_02_T1_refl.tif")
# crop the Natural Color Image using the boundary raster
rgb.Nat.Color <- crop(x = rgb.Nat.Color, # Raster* object to crop
y = boundary # Extent object
)
#plot the RGB composite
plotRGB(rgb.Nat.Color)
plotRGB(AarhusReg - 7000, # Remove the largest of the lowest values so the lowest value in the RasterStack is Zero.
scale=10000, # Maximum (possible) value in the three channels - the max 90-percentile
zlim=c(0, 10000), # Range of values to plot
axes=TRUE, main="Landsat - Aarhus\n Custom stretch "# add a title
)
near.infrared = raster("LC08_L1TP_023032_20210622_20210629_02_T1_B5.TIF")
dir()
near.infrared = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
near.infrared = crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
rgb = stack(r = near.infrared,
g = red,
b = green)
# Load the near infrared Raster
near.infrared = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
# Crop the near infrared Raster
near.infrared = crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Color Infrared combination
rgb.Col.InfRed = stack(r = near.infrared,
g = red,
b = green)
red
near.infrared
AarhusReg
rgb.Col.InfRed = stack(r = near.infrared,
g = AarhusReg[1],
b = AarhusReg[2])
rgb.Col.InfRed
near.infrared = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
# Crop the near infrared Raster
near.infrared = crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
rgb.ColInf = stack(r = near.infrared,
g = AarhusReg[1],
b = AarhusReg[2])
near.infrared
near.infrared = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
plot(near.infrared)
near.infrared = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B5.TIF")
# Crop the near infrared Raster
near.infrared = crop(x = near.infrared, # Raster* object to crop
y = boundary # Extent object
)
plot(near.infrared)
rgb.ColInf = stack(near.infrared,
AarhusReg[1],
AarhusReg[2])
plotRGB(rgb.Col.InfRed, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Color Infrared "# add a title
)
plotRGB(rgb.ColInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Color Infrared "# add a title
)
rgb.ColInf
rgb.ColInf = stack(near.infrared,
AarhusReg[1],
AarhusReg[2])
rgb.ColInf
near.infrared
rgb.ColInf = stack(near.infrared,
AarhusReg[[1]],
AarhusReg[[2]])
rgb.ColInf
plotRGB(rgb.ColInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Color Infrared "# add a title
)
sw.infrared.1 = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B6.TIF")
# Crop the Short-Wave Infrared 1
sw.infrared.1 = crop(x = sw.infrared.1, # Raster* object to crop
y = boundary # Extent object
)
# Load the Short-Wave Infrared 2
sw.infrared.2 = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B7.TIF")
# Crop the Short-Wave Infrared 2
sw.infrared.2 = crop(x = sw.infrared.2, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Short-Wave Infrared combination
rgb.SwInf = stack(sw.infrared.1, # Short-Wave Infrared 1
sw.infrared.2, # Short-Wave Infrared 2
AarhusReg[[1]] # red
)
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "hist", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
plotRGB(rgb.SwInf, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Short-Wave Infrared "# add a title
)
rgb.Agro = stack(sw.infrared.1, # Short-Wave Infrared 1
near.infrared, # near infrared
AarhusReg[[3]] # blue
)
# Plot the Agriculturecombination raster stack
plotRGB(rgb.Agro, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Agriculture "# add a title
)
# Create a raster stack with the bands for a Geology combination
rgb.Geo = stack(sw.infrared.2, # Short-Wave Infrared 2
sw.infrared.1, # Short-Wave Infrared 1
AarhusReg[[3]] # blue
)
# Plot the Geology combination raster stack
plotRGB(rgb.Geo, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Geology "# add a title
)
coastal.bands = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
coastal.bands = crop(x = coastal.bands, # Raster* object to crop
y = boundary # Extent object
)
# Load the near infrared Raster
coastal.bands = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
# Crop the coastal bands Raster
coastal.bands = crop(x = coastal.bands, # Raster* object to crop
y = boundary # Extent object
)
# Create a raster stack with the bands for a Bathymetric combination
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]] # green
coastal.bands, # coastal bands
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands, # coastal bands
)
coastal.bands = raster("LC08_L1TP_196021_20190629_20200827_02_T1_B1.TIF")
# Crop the coastal bands Raster
coastal.bands = crop(x = coastal.bands, # Raster* object to crop
y = boundary # Extent object
)
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands, # coastal bands
)
coastal.bands
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands, # coastal bands
)
rgb.Bati = stack(AarhusReg[[1]], # red
AarhusReg[[2]], # green
coastal.bands # coastal bands
)
plotRGB(rgb.Bati, # RasterStack
r = 1, # Index of the Red channel in the RasterStack
g =2, # Index of the Green channel in the RasterStack
b= 3, # Index of the Blue channel in the RasterStack
scale = 65535, # Maximum (possible) value in the three channels
stretch = "lin", # How to stretch the values to increase the contrast of the image
axes=TRUE, main="Landsat - Aarhus\n Bathymetric "# add a title
)
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
?plot.raster
NDVI <- (near.infrared - AarhusReg[[1]]) / (near.infrared + AarhusReg[[1]])
# Define a color palette that goes from red to darkcyan
colors = colorRampPalette(c("red3", "white", "darkcyan"))(255)
# pot the NDVI
plot(NDVI, # raster object
zlim = c(0, 0.6), ## Range of values to plot
col = colors # the color ramp
)
?plot,raster
?plot.raster
plot(NDVI, # raster object
zlim = c(0, 0.6), ## Range of values to plot
col = colors # the color ramp
main = "NDVI - Aarhus"
plot(NDVI, # raster object
zlim = c(0, 0.6), ## Range of values to plot
col = colors, # the color ramp
main = "NDVI - Aarhus",
colNA = "black")
Sys.setenv(NOAWT=1)
library(OpenStreetMap)
install.packages("OpenStreetMap")
library(OpenStreetMap)
upperLeft = c(10.09, 56.36)
lowerRight = c(10.65, 56.06)
basemap = openmap(upperLeft, lowerRight, zoom=13)
library(OpenStreetMap)
library(OpenStreetMap)
upperLeft = c(10.09, 56.36)
lowerRight = c(10.65, 56.06)
basemap = openmap(upperLeft, lowerRight, zoom=13)
upperLeft = c(10.09, 56.36)
lowerRight = c(10.65, 56.06)
basemap = openmap(upperLeft, lowerRight, zoom=13)
upperLeft
openmap(upperLeft, lowerRight, zoom=13)
?openmap
basemap = openmap(upperLeft, lowerRight)
map <- openmap(c(43.46886761482925,119.94873046875),
c(33.22949814144951,133.9892578125),
minNumTiles=4)
map <- openmap(c(43.46886761482925,119.94873046875),
c(33.22949814144951,133.9892578125),
minNumTiles=4)
map <- openmap(c(43.46886761482925,119.94873046875),
c(33.22949814144951,133.9892578125),
minNumTiles=3)
ndvi = RGB(NDVI, col=colors)
ndvi
openmap(upperLeft, lowerRight)
apiKey <- paste0("?access_token=",
"pk.eyJ1IjoidGhlZmVsbCIsImEiOiJjaXN1anNwODEwMWlrMnRvZHBhamRrZjlqIn0.Gf8qLSpZ6yo5yfQhEutFfQ")
baseUrl <- "https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v9/tiles/256/{z}/{x}/{y}"
map <- openmap(c(43.46886761482925,119.94873046875),
c(33.22949814144951,133.9892578125),
minNumTiles=4,
type=paste0(baseUrl,apiKey))
install.packages("basemaps")
library(basemaps)
data(ext)
get_maptypes()
set_defaults(map_service = "osm", map_type = "topographic")
# load and return basemap map as class of choice, e.g. as image using magick:
basemap_magick(ext)
basemap_magick(ext, map_service = "carto", map_type = "dark")
ext
